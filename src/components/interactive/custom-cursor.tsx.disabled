"use client";

import { useEffect, useRef, useState } from 'react';
import { motion, useMotionValue, useSpring } from 'framer-motion';

interface TrailPoint {
  x: number;
  y: number;
  opacity: number;
  size: number;
}

export const CustomCursor = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [isHovering, setIsHovering] = useState(false);
  const [isClicking, setIsClicking] = useState(false);
  const trailRef = useRef<TrailPoint[]>([]);
  const animationRef = useRef<number>();

  const cursorX = useMotionValue(-100);
  const cursorY = useMotionValue(-100);

  const springConfig = { damping: 25, stiffness: 700 };
  const cursorSpringX = useSpring(cursorX, springConfig);
  const cursorSpringY = useSpring(cursorY, springConfig);

  useEffect(() => {
    const moveCursor = (e: MouseEvent) => {
      cursorX.set(e.clientX);
      cursorY.set(e.clientY);
      setIsVisible(true);

      // Add to trail
      trailRef.current.push({
        x: e.clientX,
        y: e.clientY,
        opacity: 1,
        size: isClicking ? 8 : isHovering ? 6 : 4,
      });

      // Limit trail length
      if (trailRef.current.length > 15) {
        trailRef.current.shift();
      }
    };

    const handleMouseEnter = () => setIsVisible(true);
    const handleMouseLeave = () => setIsVisible(false);
    const handleMouseDown = () => setIsClicking(true);
    const handleMouseUp = () => setIsClicking(false);

    // Check for hoverable elements
    const handleMouseOver = (e: MouseEvent) => {
      const target = e.target as Element;
      if (target.matches('button, a, [role="button"], input, textarea, select')) {
        setIsHovering(true);
      } else {
        setIsHovering(false);
      }
    };

    document.addEventListener('mousemove', moveCursor);
    document.addEventListener('mouseenter', handleMouseEnter);
    document.addEventListener('mouseleave', handleMouseLeave);
    document.addEventListener('mousedown', handleMouseDown);
    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('mouseover', handleMouseOver);

    // Animate trail
    const animateTrail = () => {
      trailRef.current = trailRef.current.map((point, index) => ({
        ...point,
        opacity: point.opacity * 0.85,
        size: point.size * 0.95,
      })).filter(point => point.opacity > 0.01);

      animationRef.current = requestAnimationFrame(animateTrail);
    };
    animateTrail();

    return () => {
      document.removeEventListener('mousemove', moveCursor);
      document.removeEventListener('mouseenter', handleMouseEnter);
      document.removeEventListener('mouseleave', handleMouseLeave);
      document.removeEventListener('mousedown', handleMouseDown);
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('mouseover', handleMouseOver);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [cursorX, cursorY, isHovering, isClicking]);

  return (
    <>
      {/* Hide default cursor */}
      <style jsx global>{`
        * {
          cursor: none !important;
        }
      `}</style>

      {/* Trail */}
      {trailRef.current.map((point, index) => (
        <motion.div
          key={index}
          className="fixed pointer-events-none z-50 rounded-full"
          style={{
            left: point.x - point.size / 2,
            top: point.y - point.size / 2,
            width: point.size,
            height: point.size,
            background: `radial-gradient(circle, rgba(59, 130, 246, ${point.opacity * 0.6}) 0%, transparent 70%)`,
          }}
        />
      ))}

      {/* Main cursor */}
      <motion.div
        className="fixed pointer-events-none z-50 mix-blend-difference"
        style={{
          x: cursorSpringX,
          y: cursorSpringY,
        }}
        animate={{
          scale: isVisible ? (isClicking ? 0.8 : isHovering ? 1.5 : 1) : 0,
          opacity: isVisible ? 1 : 0,
        }}
        transition={{
          type: "spring",
          damping: 20,
          stiffness: 400,
        }}
      >
        <div
          className={`w-6 h-6 rounded-full border-2 -translate-x-1/2 -translate-y-1/2 transition-all duration-200 ${
            isHovering 
              ? 'border-white bg-white/20' 
              : 'border-primary bg-primary/20'
          }`}
        >
          <div className="w-1 h-1 bg-white rounded-full absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" />
        </div>
      </motion.div>

      {/* Outer ring */}
      <motion.div
        className="fixed pointer-events-none z-40"
        style={{
          x: cursorX,
          y: cursorY,
        }}
        animate={{
          scale: isVisible ? (isClicking ? 0.5 : isHovering ? 2 : 1.5) : 0,
          opacity: isVisible ? 0.3 : 0,
        }}
        transition={{
          type: "spring",
          damping: 30,
          stiffness: 200,
          delay: 0.1,
        }}
      >
        <div className="w-10 h-10 rounded-full border border-primary/30 -translate-x-1/2 -translate-y-1/2" />
      </motion.div>
    </>
  );
};